#!/usr/bin/env bash
#
# Summary: Update packages in particular or all pyenv and conda environments
#
# Usage: pyenv pip-upgrade <pyenv_env1> [<pyenv_env2> ...]
#        pyenv pip-upgrade --all
#
# This command update all packages to the latest versions of particular or all 
# pyenv environments excluding system.

# setting bash strict mode
set -o errexit 
set -o pipefail
set -o nounset
IFS=$'\n\t'

# enabling debugging if pyenv in debug mode
[[ -n ${PYENV_DEBUG:-} ]] && set -x

# functions
function __msg_error () {
  echo -e "\e[1;31m[ERROR]: ${1}\e[0m" >&2
}


function __msg_info () {
  echo -e "\e[1;33m[INFO]: ${1}\e[0m"
}


# --bare - allows to skip system installation
# --skip-aliases - skips environment aliases (speeding up updates by skipping aliases)
pyenvs=( "$(pyenv versions --bare --skip-aliases)" )

# Provide pyenv completions
if [ "$1" = "--complete" ]; then
  echo "--all" # add '--all' as completion option
  echo ${pyenvs[@]}
  exit
fi

# store input parameters to the array of strings
arguments=( "$@" )
pyenvs_to_update=()

# check if the argument is equal to "--all"
if [[ ${#arguments[@]} == 1 && "${arguments[0]}" == "--all" ]]; then
  pyenvs_to_update=( "${pyenvs[@]}" )
else
  invalid_args=()
  for arg in ${arguments[@]}; do
    is_arg_valid_pyenv=false
    for pyenv in ${pyenvs[@]}; do
      if [[ $arg == $pyenv ]]; then
        is_arg_valid_pyenv=true
        break
      fi
    done
    [[ $is_arg_valid_pyenv == false ]] && invalid_args+=( "$arg" )
  done
  
  if [[ ${#invalid_args[@]} > 0 ]]; then
    __msg_error "Invalid environments entered: ${invalid_args[@]}"
    pyenv-help pip-upgrade >&2
    exit 1
  fi
  pyenvs_to_update=${arguments[@]}
fi


__msg_info "Pyenvs to update: ${pyenvs_to_update[@]}"
for pyenv_to_update in ${pyenvs_to_update[@]}; do
  __msg_info "Updating packages of '${pyenv_to_update}'..."
  export PYENV_VERSION=${pyenv_to_update}

  # So as in conda environments pip is also available we check if this is a
  # conda environment at first.
  if conda >/dev/null 2>&1; then
      __msg_info "Updating conda environment: ${pyenv_to_update}..."
      conda update --all
      # in conda there could be packages installed with pip
      outdated_packages=( $( pip list --outdated --format=freeze 2>/dev/null | grep -v '^\-e' | cut -d = -f 1 ) )
      __msg_info "Outdated packages: ${outdated_packages[@]}"
      for pck in "${outdated_packages[@]}"; do
        pip install --upgrade "$pck"
      done
  elif pip >/dev/null 2>&1; then
       __msg_info "Updating pip environment: ${pyenv_to_update}..."
      # https://stackoverflow.com/a/3452888/1108213
      outdated_packages=( $( pip list --outdated --format=freeze 2>/dev/null | grep -v '^\-e' | cut -d = -f 1 ) )
      echo "${#outdated_packages[@]}"
      for pck in "${outdated_packages[@]}"; do
        pip install --upgrade "$pck"
      done
  else
      __msg_error "Neither conda nor pip environment is detected. Skipping it!"
  fi
done
